# -*- coding: utf-8 -*-
"""Cloudy day solution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xo-G8XdHQzEXHvXWt4YZQZ7PaNoh_QKr
"""

#!/bin/python3

def maximumPeople(p, x, y, r):
    town_count = len(p)
    cloud_count = len(y)

    towns_covered_by_cloud = [set() for _ in range(town_count)]
    cloud_coverage_count = [0] * town_count

    for cloud_index in range(cloud_count):
        cloud_start = y[cloud_index] - r[cloud_index]
        cloud_end = y[cloud_index] + r[cloud_index]
        for town_index in range(town_count):
            if cloud_start <= x[town_index] <= cloud_end:
                towns_covered_by_cloud[town_index].add(cloud_index)
                cloud_coverage_count[town_index] += 1

    initial_sunny_population = 0
    cloud_specific_population = [0] * cloud_count
    multi_cloud_population = 0

    for town_index in range(town_count):
        if cloud_coverage_count[town_index] == 0:
            initial_sunny_population += p[town_index]
        elif cloud_coverage_count[town_index] == 1:
            cloud_index = next(iter(towns_covered_by_cloud[town_index]))
            cloud_specific_population[cloud_index] += p[town_index]
        else:
            multi_cloud_population += p[town_index]

    max_additional_sunny_population = max(cloud_specific_population, default=0)
    total_sunny_population = initial_sunny_population + multi_cloud_population + max_additional_sunny_population

    return total_sunny_population

if __name__ == '__main__':
    import sys
    input = sys.stdin.read
    data = input().split()

    idx = 0
    n = int(data[idx])
    idx += 1

    populations = []
    for _ in range(n):
        populations.append(int(data[idx]))
        idx += 1

    locations = []
    for _ in range(n):
        locations.append(int(data[idx]))
        idx += 1

    m = int(data[idx])
    idx += 1

    cloud_locations = []
    for _ in range(m):
        cloud_locations.append(int(data[idx]))
        idx += 1

    cloud_ranges = []
    for _ in range(m):
        cloud_ranges.append(int(data[idx]))
        idx += 1

    result = maximumPeople(populations, locations, cloud_locations, cloud_ranges)
    print(result)