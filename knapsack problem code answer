def unbounded_knapsack(target_sum, items):
    dp = [0] * (target_sum + 1)
    for i in range(1, target_sum + 1):
        for item in items:
            if item <= i:
                dp[i] = max(dp[i], dp[i - item] + item)
    return dp[target_sum]

if __name__ == '__main__':
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])
    index = 1
    
    results = []
    
    for _ in range(t):
        n = int(data[index])
        k = int(data[index + 1])
        arr = list(map(int, data[index + 2 : index + 2 + n]))
        index += 2 + n
        
        result = unbounded_knapsack(k, arr)
        results.append(result)
    
    for res in results:
        print(res)
